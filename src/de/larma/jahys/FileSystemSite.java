package de.larma.jahys;

import com.sun.net.httpserver.HttpExchange;
import de.larma.net.IOHelper;

import java.io.*;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

public class FileSystemSite implements HypertextSite {
	private final String sitePrefix;
	private final String siteFolder;

	public FileSystemSite(String sitePrefix, String siteFolder) {
		this.sitePrefix = ensurePath(sitePrefix);
		this.siteFolder = ensurePath(siteFolder);
	}

	private static String ensurePath(String path) {
		return (!path.isEmpty() && (path.charAt(path.length() - 1) == '/')) ? path : (path + '/');
	}

	private void addFileInfo( String currentDir,  File file,  StringBuilder out) {
		Date date = new Date(file.lastModified());
		String size = humanReadable(file.length());
		out.append("<tr><td>").append(getTypePrefix(file)).append("</td><td>").append("<a href=\"")
		   .append(file.getName()).append("\">").append(file.getName()).append("</a></td><td>")
		   .append(size).append("</td><td>").append(date).append("</td></tr>");
	}

	private void addFooter(String currentDir,  File dir,  StringBuilder out) {
		out.append("</tbody></table><footer><hr><small>Absolute path: ").append(dir.getAbsolutePath())
		   .append(" | Generated by JaHyS</small></footer></body>");
	}

	private void addHeader(String currentDir,  File dir,  StringBuilder out) {
		out.append("<!DOCTYPE html>\n<html><head><title>").append(dir.getName())
		   .append("</title></head><body><header><h1>").append(sitePrefix + currentDir)
		   .append("</h1><hr></header><table><thead><tr><td></td><td>Name</td><td>Size</td><td>Last modified</td></tr></thead><tbody>");
	}

	private void addParentInfo(String currentDir, StringBuilder out) {
		out.append("<tr><td>").append("</td><td>").append("<a href=\"")
		   .append("..").append("\">").append("..").append("</a></td><td>").append("</td><td>")
		   .append("</td></tr>");
	}

	
	private String getContentType( String file) {
		return (file.endsWith(".htm") || file.endsWith(".html")) ? "text/html" : (file.endsWith(".gif") ? "image/gif" :
																				  ((file.endsWith(".jpg") ||
																					file.endsWith(".jpeg")) ?
																				   "image/jpeg" :
																				   ((file.endsWith(".class") ||
																					 file.endsWith(".jar")) ?
																					"applicaton/octet-stream" :
																					"text/plain")));
	}

	
	@Override
	public String getSitePrefix() {
		return sitePrefix;
	}

	
	private String getTypePrefix( File file) {
		StringBuilder prefix = new StringBuilder();
		prefix.append(file.isDirectory() ? "d" : (file.isFile() ? "f" : "-"));
		prefix.append(file.canRead() ? "r" : "-");
		prefix.append(file.canWrite() ? "w" : "-");
		prefix.append(file.canExecute() ? "x" : "-");
		return prefix.toString();
	}

	
	private String humanReadable(long size) {
		double s = size;
		if (s > 1024) {
			s /= 1024;
		} else {
			return (Math.round(s * 100.0) / 100.0) + "B";
		}
		if (s > 1024) {
			s /= 1024;
		} else {
			return (Math.round(s * 100.0) / 100.0) + "KB";
		}
		if (s > 1024) {
			s /= 1024;
		} else {
			return (Math.round(s * 100.0) / 100.0) + "MB";
		}
		if (s > 1024) {
			s /= 1024;
		} else {
			return (Math.round(s * 100.0) / 100.0) + "GB";
		}
		return (Math.round(s * 100.0) / 100.0) + "TB";
	}

	@Override
	public void incomingRequest( HttpExchange httpExchange, Map<String, List<String>> params)
			throws IOException {
		String path = httpExchange.getRequestURI().getPath().substring(sitePrefix.length());
		String fullPath = siteFolder + path;
		File file = new File(fullPath);
		if (file.isFile()) {
			httpExchange.getResponseHeaders().set(SiteHandler.CONTENT_TYPE_HEADER, getContentType(file.getName()));
			httpExchange.sendResponseHeaders(200, file.length());
			try (InputStream is = new FileInputStream(file)) {
				try (OutputStream os = httpExchange.getResponseBody()) {
					IOHelper.stream(is, os);
				}
			}
		} else if (file.isDirectory() && !httpExchange.getRequestURI().toString().endsWith("/")) {
			httpExchange.getResponseHeaders().add("Location", httpExchange.getRequestURI().toString() + "/");
			httpExchange.sendResponseHeaders(301, 0);
		} else if (file.isDirectory()) {
			StringBuilder out = new StringBuilder();
			addHeader(path, file, out);
			if (path.contains("/"))
				addParentInfo(path, out);
			String[] list = file.list();
			Arrays.sort(list);
			for (String f : list) {
				addFileInfo(path, new File(file.getAbsolutePath() + "/" + f), out);
			}
			addFooter(path, file, out);
			httpExchange.getResponseHeaders().set(SiteHandler.CONTENT_TYPE_HEADER, "text/html");
			httpExchange.sendResponseHeaders(200, out.length());
			try (OutputStream os = httpExchange.getResponseBody()) {
				os.write(out.toString().getBytes());
			}
		} else {
			String string = "File " + file.getAbsolutePath() + " does not exist.";
			httpExchange.sendResponseHeaders(404, string.length());
			httpExchange.getResponseBody().write(string.getBytes());
			httpExchange.getResponseBody().close();
		}
	}
}
